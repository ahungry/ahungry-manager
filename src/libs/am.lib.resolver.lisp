;; am - A project template generated by ahungry-fleece
;; Copyright (C) 2018 Matthew Carter <m@ahungry.com>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;; am.lib.resolver.lisp

(in-package #:cl-user)

(defpackage am.lib.resolver
  (:use :cl
        :af.lib.hashy
        :af.lib.io)
  (:export
   :echo))

(in-package #:am.lib.resolver)

(defstruct node-package
  dev-dependencies
  dependencies
  version
  description
  name)

(defun json-file-to-node-package (file)
  "Load a JSON file to the object."
  (let ((hash (hash-from-json-file file)))
    (make-node-package
     :dev-dependencies (ref "#/devDependencies" hash)
     :dependencies (ref "#/dependencies" hash)
     :version (ref "#/version" hash)
     :description (ref "#/description" hash)
     :name (ref "#/name" hash))))

(defun extract-tarball (pathname)
  "Extract a tarball (.tar.gz) file to a directory (*default-pathname-defaults*).

TODO: Put in fleece"
  (handler-case
      (with-open-file (tarball-stream pathname
                                      :direction :input
                                      :element-type '(unsigned-byte 8))
        (archive::extract-files-from-archive
         (archive:open-archive 'archive:tar-archive
                               (chipz:make-decompressing-stream 'chipz:gzip tarball-stream)
                               :direction :input)))
    ;; Extended tar headers can bork this.  TODO: Maybe call CLI untar.
    (archive:unhandled-read-header-error () nil)))

(defun get-node-package-tgz-url (name version)
  (format nil "https://registry.npmjs.org/~a/-/~a-~a.tgz"
          name name version))

(defun fetch-node-package (name version)
  "Download NAME tarball, extract it, and rename directory.

TODO: Ensure /tmp/ahungry-manager/ exists."
  (let* ((*default-pathname-defaults* (pathname (format nil "/tmp/ahungry-manager/~a.tmp/" name)))
         (tar-file-name (format nil "/tmp/ahungry-manager/~a.tmp/~a-~a.tgz" name name version)))
    (trivial-download:download
     (get-node-package-tgz-url name version)
     tar-file-name)
    (print tar-file-name)
    (print name)
    (handler-case
        (progn
          (extract-tarball tar-file-name)
          (rename-file (pathname (format nil "/tmp/ahungry-manager/~a.tmp/package" name))
                       (merge-pathnames name "/tmp/ahungry-manager/")))
      (archive:unhandled-read-header-error ()
        (file-put-contents
         "/tmp/ahungry-manager/~a/package.json"
         (format nil "{\"name\":\"~a\"}" name)))
      (error ()
        (file-put-contents
         "/tmp/ahungry-manager/~a/package.json"
         (format nil "{\"name\":\"~a\"}" name)))
      )))

(defun transform-name (name)
  "The hashy stuff is camelCasing dashes, so undo it.

TODO: Fix the bonked casing in our json to hash stuff."
  (string-downcase
   (cl-ppcre:regex-replace-all "([A-Z])" name "-\\1")))

(defun get-node-package (name version)
  "Pull in a node package (fetching if it doesn't exist).

Save it in our package array as a package object."
  (let* ((name (transform-name name))
         (package-dir (format nil "/tmp/ahungry-manager/~a/" name))
         (version (cl-ppcre:regex-replace-all "[^0-9A-Za-z.]" version "")))
    (unless (directory-p package-dir)
      (fetch-node-package name version))
    (json-file-to-node-package
     (format nil "/tmp/ahungry-manager/~a/package.json" name))))

(defun get-node-package-threaded (name version)
  (bt:make-thread (lambda () (get-node-package name version)) :name name))

(defmethod get-package-dependencies ((obj Node-Package))
  (maphash #'get-node-package-threaded (node-package-dependencies obj)))

(defun get-all-node-packages ()
  "Given an initial package.json file, keep iterating/pulling
  dependencies until we stop getting new fetched ones."
  (let ((initial-count (length (find-file "/tmp/ahungry-manager" "package.json")))
        (pass-count 0))
    (mapcar
     (lambda (json)
       (print json)
       (let ((obj (json-file-to-node-package json)))
         (when (and obj (node-package-dependencies obj))
           (get-package-dependencies (json-file-to-node-package json)))))
     (find-file "/tmp/ahungry-manager" "package.json"))
    ))

;;; "am.lib.resolver" goes here. Hacks and glory await!
