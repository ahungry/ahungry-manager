;; am - A project template generated by ahungry-fleece
;; Copyright (C) 2018 Matthew Carter <m@ahungry.com>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;; am.lib.resolver.lisp

(in-package #:cl-user)

(defpackage am.lib.resolver
  (:use :cl
        :af.lib.hashy
        :af.lib.io)
  (:export
   :echo))

(in-package #:am.lib.resolver)

(defstruct node-package
  dev-dependencies
  dependencies
  version
  description
  name)

(defun json-file-to-node-package (file)
  "Load a JSON file to the object."
  (let ((hash (hash-from-json-file file)))
    (make-node-package
     :dev-dependencies (ref "#/devDependencies" hash)
     :dependencies (ref "#/dependencies" hash)
     :version (ref "#/version" hash)
     :description (ref "#/description" hash)
     :name (ref "#/name" hash))))

(defun extract-tarball (pathname)
  "Extract a tarball (.tar.gz) file to a directory (*default-pathname-defaults*).

TODO: Put in fleece"
  (with-open-file (tarball-stream pathname
                                  :direction :input
                                  :element-type '(unsigned-byte 8))
    (archive::extract-files-from-archive
     (archive:open-archive 'archive:tar-archive
                           (chipz:make-decompressing-stream 'chipz:gzip tarball-stream)
                           :direction :input))))

(defun get-node-package-tgz-url (name version)
  (format nil "https://registry.npmjs.org/~a/-/~a-~a.tgz"
          name name version))

(defun fetch-node-package (name version)
  "Download NAME tarball, extract it, and rename directory.

TODO: Ensure /tmp/ahungry-manager/ exists."
  (let* ((*default-pathname-defaults* #P"/tmp/ahungry-manager/")
         (tar-file-name (format nil "/tmp/ahungry-manager/~a-~a.tgz" name version)))
    (trivial-download:download
     (get-node-package-tgz-url name version)
     tar-file-name)
    (print tar-file-name)
    (print name)
    (extract-tarball tar-file-name)
    (rename-file "/tmp/ahungry-manager/package"
                 (merge-pathnames name "/tmp/ahungry-manager/"))))

(defun transform-name (name)
  "The hashy stuff is camelCasing dashes, so undo it."
  (string-downcase
   (cl-ppcre:regex-replace-all "([A-Z])" name "-\\1")))

(defun get-node-package (name version)
  "Pull in a node package (fetching if it doesn't exist).

Save it in our package array as a package object."
  (let ((package-dir (format nil "/tmp/ahungry-manager/~a/" name))
        (name (transform-name name))
        (version (cl-ppcre:regex-replace-all "[^0-9A-Za-z.]" version "")))
    (unless (directory-p package-dir)
      (fetch-node-package name version))
    (json-file-to-node-package
     (format nil "/tmp/ahungry-manager/~a/package.json" name))))

(defmethod get-package-dependencies ((obj Node-Package))
  (maphash #'get-node-package (node-package-dependencies obj)))

(defun echo (input)
  input)

;;; "am.lib.resolver" goes here. Hacks and glory await!
